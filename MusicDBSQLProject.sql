/* Hi, my name is Tate Doherty and I am making an SQL Project in MySQL using a music data set 
with 11 tables. link: https://shorturl.at/sEIUV */

/* A. Make sure that the data has loaded */
SELECT * FROM album;
SELECT * FROM artist;
SELECT * FROM customer;
SELECT * FROM employee;
SELECT * FROM genre;
SELECT * FROM invoice;
SELECT * FROM invoice_line;
SELECT * FROM media_type;
SELECT * FROM playlist;
SELECT * FROM playlist_track;
SELECT * FROM track;

/* B. Make sure there are no null values in the data for the two tables */
SELECT COUNT(*) AS count_of_null_values
FROM album
WHERE album_id IS NULL OR artist_id IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM artist
WHERE artist_id IS NULL OR name IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM customer
WHERE customer_id IS NULL OR first_name IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM employee
WHERE employee_id IS NULL OR first_name IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM genre
WHERE genre_id IS NULL OR name IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM invoice
WHERE invoice_id IS NULL OR billing_address IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM invoice_line
WHERE invoice_line_id IS NULL OR unit_price IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM media_type
WHERE media_type_id IS NULL OR name IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM playlist
WHERE playlist_id IS NULL OR name IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM playlist_track
WHERE playlist_id IS NULL OR track_id IS NULL;

SELECT COUNT(*) AS count_of_null_values
FROM track
WHERE track_id IS NULL OR name IS NULL;

/* 1. How many albums, artists, playlists, and tracks are in the music database? */
SELECT COUNT(album_id) AS album_count
FROM album; 

SELECT COUNT(artist_id) AS artist_count
FROM artist;

SELECT COUNT(playlist_id) AS playlist_count
FROM playlist;

SELECT COUNT(track_id) AS track_count
FROM track;

/* 2. Which cities and countries bring in the most money from customers? */
SELECT billing_city AS city, ROUND(SUM(total), 2) as total_money_received
FROM invoice
GROUP BY billing_city
ORDER BY total_money_received DESC;

SELECT billing_country AS country, ROUND(SUM(total), 2) as total_money_received
FROM invoice
GROUP BY billing_country
ORDER BY total_money_received DESC;

/* 3. The manager has agreed to give a $25 reward to the customer who has
 spent the most money. Please provide all of his or her information  */
SELECT c.first_name, c.last_name,
    (SELECT ROUND(SUM(i2.total), 2)
     FROM invoice i2
     WHERE i2.customer_id = c.customer_id
     GROUP BY i2.customer_id
     ORDER BY SUM(i2.total) DESC
     LIMIT 1) AS invoice_total,
    i.billing_address,
    i.billing_city,
    i.billing_state
FROM customer c
JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name, i.billing_address, i.billing_city, i.billing_state
ORDER BY invoice_total DESC
LIMIT 1;

/* 4. Calculate the average unit price for tracks in each media type.  */
SELECT m.name, ROUND(AVG(t.unit_price), 2) AS avg_media_price
FROM media_type m JOIN track t ON m.media_type_id = t.media_type_id
GROUP BY m.name
ORDER BY avg_media_price DESC;

/* 5. List all employees and their managers (if applicable).  */
SELECT
    e1.employee_id AS employee_id,
    e1.first_name AS employee_first_name,
    e1.last_name AS employee_last_name,
    e1.title AS employee_title,
    e1.reports_to AS manager_id,
    e2.first_name AS manager_first_name,
    e2.last_name AS manager_last_name
FROM employee AS e1
LEFT JOIN employee AS e2 ON e1.reports_to = e2.employee_id;

/* 6. List all employees and their managers (if applicable).  */
SELECT g.name AS genre, COUNT(t.track_id) AS total_tracks
FROM genre AS g
LEFT JOIN track AS t ON g.genre_id = t.genre_id
GROUP BY g.name
ORDER BY total_tracks DESC;

/* 7. Retrieve the top 5 best-selling tracks of all time (include genre and quantity sold).  */
SELECT t.name AS track_name, g.name AS genre_name, SUM(il.quantity) AS total_quantity_sold
FROM track t JOIN genre g ON t.genre_id = g.genre_id
JOIN invoice_line il ON t.track_id = il.track_id
GROUP BY t.name, g.name
ORDER BY total_quantity_sold DESC
LIMIT 5;

/* 8. List the artists and the number of albums they have in the database.  */
SELECT a.name AS artist_name, COUNT(al.album_id) AS number_of_albums
FROM artist AS a
LEFT JOIN album AS al ON a.artist_id = al.artist_id
GROUP BY a.name
ORDER BY number_of_albums DESC;

/* 9. Calculate the total revenue generated by a specific playlist. */
SELECT p.name AS playlist_name, ROUND(SUM(il.unit_price * il.quantity), 2) AS total_revenue
FROM playlist p JOIN playlist_track pt ON p.playlist_id =pt.playlist_id
JOIN invoice_line il ON il.track_id = pt.track_id 
JOIN track t ON t.track_id = pt.track_id
GROUP BY p.name
ORDER BY total_revenue DESC;

/* 10. Calculate the total sales for each year (based on invoice date). */
SELECT YEAR(invoice_date) AS sales_year, ROUND(SUM(total), 2) AS total_sales
FROM invoice
GROUP BY YEAR(invoice_date)
ORDER BY sales_year;

/* 11. Retrieve the artists who have tracks in multiple genres. */
SELECT a.name AS artist_name, COUNT(DISTINCT t.genre_id) AS number_of_genres
FROM artist a JOIN album al ON a.artist_id = al.artist_id
JOIN track t ON al.album_id = t.album_id
GROUP BY a.name
HAVING number_of_genres > 1
ORDER BY number_of_genres DESC;

/* 12. Calculate the average duration of tracks in minutes and seconds for each genre. */
SELECT g.name AS genre_name,
    CONCAT(
        FLOOR(AVG(t.milliseconds) / 60000), ' minutes ',
        FLOOR((AVG(t.milliseconds) % 60000) / 1000), ' seconds'
    ) AS average_duration
FROM genre g JOIN track t ON g.genre_id = t.genre_id
GROUP BY g.name
ORDER BY AVG(t.milliseconds) DESC;

/* 13. Get the top 10 most popular genres based on the number of tracks sold. */
SELECT g.name AS genre_name, SUM(il.quantity) AS total_tracks_sold
FROM genre g JOIN track t ON g.genre_id = t.genre_id
JOIN invoice_line AS il ON t.track_id = il.track_id
GROUP BY g.name
ORDER BY total_tracks_sold DESC
LIMIT 10;

/* 14. Identify the three most popular days of the week for sales based on the total revenue 
generated on each day. */
SELECT DAYNAME(i.invoice_date) AS day_of_week, ROUND(SUM(i.total), 2) AS total_revenue
FROM invoice i
GROUP BY day_of_week
ORDER BY total_revenue DESC
LIMIT 3;

/* 15. Calculate the total revenue generated by each employee in terms of their sales. */
SELECT e.employee_id, e.first_name, e.last_name, ROUND(SUM(i.total), 2) AS total_revenue
FROM employee e LEFT JOIN customer c ON e.employee_id = c.support_rep_id
LEFT JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY e.employee_id, e.first_name, e.last_name;

/* 16. Identify the most common billing state/province for customers in each country. */
WITH CommonBillingStates AS (
    SELECT c.country, i.billing_state AS state, COUNT(i.billing_state) AS billing_state_count
    FROM customer c
    JOIN invoice i ON c.customer_id = i.customer_id
    GROUP BY c.country, i.billing_state
    ORDER BY billing_state_count DESC
)

SELECT country, state, billing_state_count
FROM (
    SELECT country, state, billing_state_count,
        ROW_NUMBER() OVER (PARTITION BY country ORDER BY billing_state_count DESC) AS rn
    FROM CommonBillingStates
) ranked
WHERE rn = 1
ORDER BY billing_state_count DESC;

/* 17. List the 10 tracks with the highest sales-to-duration ratio (revenue per second). */
SELECT t.name AS track_name,
    CONCAT(
        ROUND(SUM(il.unit_price) / (t.milliseconds / 1000), 2), ' $/s'
    ) AS sales_to_duration_ratio
FROM track t
JOIN invoice_line il ON t.track_id = il.track_id
GROUP BY t.name, t.milliseconds, t.unit_price
ORDER BY sales_to_duration_ratio DESC
LIMIT 10;

/* 18. Calculate the total revenue for each playlist, considering the sum of unit 
prices of tracks within each playlist.*/
SELECT p.name AS playlist_name, ROUND(SUM(il.unit_price), 2) AS total_revenue
FROM playlist p JOIN playlist_track pt ON p.playlist_id = pt.playlist_id
JOIN track t ON pt.track_id = t.track_id
JOIN invoice_line il ON t.track_id = il.track_id
GROUP BY p.name
ORDER BY total_revenue DESC;






 

